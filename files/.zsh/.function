#!/bin/bash

cd() {
	builtin cd "$@"
	current_repository=$(git rev-parse --show-toplevel 2> /dev/null)
  if [ "$current_repository" ] && [ "$current_repository" != "$last_repository" ]; then
    onefetch -E --no-title --no-color-palette
	fi
}

ecs_exec() {
  if [ -z "$1" ]; then
    echo "Missing ECS name"
    return 1
  fi

  local ecs_name="$1"

  if [ -n "$2" ]; then
    export AWS_REGION="$2"
  fi

  aws ecs execute-command --region "$AWS_REGION" --cluster "$ecs_name" \
    --task "$(aws ecs list-tasks --cluster "$ecs_name" --service-name "$ecs_name" \
      --output text --query 'taskArns[0]')" --container "$ecs_name" --command "/bin/bash" --interactive
}

_fzf_compgen_path() {
  fdfind --hidden --follow --exclude ".git" . "$1"
}

_fzf_compgen_dir() {
  fdfind --type d --hidden --follow --exclude ".git" . "$1"
}

_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
    export|unset) fzf --preview "eval 'echo ${}'"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview "$show_file_or_dir_preview" "$@" ;;
  esac
}

rga-fzf() {
	RG_PREFIX="rga --files-with-matches"
	local file
	file="$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
				--phony -q "$1" \
				--bind "change:reload:$RG_PREFIX {q}" \
				--preview-window="70%:wrap"
	)" &&
	echo "opening $file" &&
	xdg-open "$file"
}

yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

sync_with_rclone() {
  for arg in "$@"; do
    case $arg in
      --user=*)
        USERNAME="${arg#*=}"
        shift
        ;;
      --remote=*)
        REMOTE="${arg#*=}"
        shift
        ;;
      --pull)
        DIRECTION="pull"
        shift
        ;;
      *)
        echo "‚ùå Unknown option: $arg"
        return 1
        ;;
    esac
  done

  if [ -z "$USERNAME" ]; then
    echo "‚ùå Missing required argument: --user=<WindowsUsername>"
    return 1
  fi

  REMOTE="${REMOTE:-Google}"
  DIRECTION="${DIRECTION:-push}" 

  echo "üë§ User: $USERNAME"
  echo "‚òÅÔ∏è Remote: $REMOTE"
  echo "üîÅ Direction: $DIRECTION"

  for DIR in Documents Music Pictures Videos; do
    LOCAL_PATH="/mnt/c/Users/${USERNAME}/${DIR}"
    REMOTE_PATH="${REMOTE}:/${DIR}"

    if [ "$DIRECTION" = "pull" ]; then
      SRC="$REMOTE_PATH"
      DEST="$LOCAL_PATH"
      echo "‚¨áÔ∏è  Syncing REMOTE ‚Üí LOCAL: $SRC ‚Üí $DEST"
    else
      SRC="$LOCAL_PATH"
      DEST="$REMOTE_PATH"
      echo "‚¨ÜÔ∏è  Syncing LOCAL ‚Üí REMOTE: $SRC ‚Üí $DEST"
    fi

    rclone sync "$SRC" "$DEST" \
      -P \
      --exclude "desktop.ini" \
      --exclude ".*" \
      --local-no-set-modtime
  done
}
